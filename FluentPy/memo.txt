>>> import os
>>> _, filename = os.path.split('/home/luciano/.ssh/idrsa.pub')
>>> filename
'idrsa.pub'


a, b, *rest = range(5)
>>> a, b, rest
(0, 1, [2, 3, 4])



metro_areas = [
('Tokyo', 'JP', 36.933, (35.689722, 139.691667)), #
('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),
('Mexico City', 'MX', 20.142, (19.433333, -99.133333))
]
for name, cc, pop, (latitude, longitude) in metro_areas: #
    if longitude <= 0: #
        print(fmt.format(name, latitude, longitude))


Two parameters are required to create a named tuple: a class name and a list of
field names, which can be given as an iterable of strings or as a single spacedelimited
string.
Data must be passed as positional arguments to the constructor (in contrast, the
tuple constructor takes a single iterable).
You can access the fields by name or position.

_fields is a tuple with the field names of the class.
_make() allow you to instantiate a named tuple from an iterable; City(*del
hi_data) would do the same.
_asdict() returns a collections.OrderedDict built from the named tuple
instance. That can be used to produce a nice display of city data.

This is no secret, but worth repeating just in case: s[a:b:c] can be used to specify a
stride or step c, causing the resulting slice to skip items. The stride can also be negative,
returning items in reverse. Three examples make this clear:
>>> s = 'bicycle'
>>> s[::3]
'bye'
>>> s[::-1]
'elcycib'
>>> s[::-2]
'eccb'


Python programmers expect that sequences support + and *. Usually both operands of
+ must be of the same sequence type, and neither of them is modified but a new sequence
of the same type is created as result of the concatenation.
Both + and * always create a new object, and never change their operands.

Beware of expressions like a * n when a is a sequence containing
mutable items because the result may surprise you. For example,
trying to initialize a list of lists as my_list = [[]] * 3 will
result in a list with three references to the same inner list, which is
probably not what you want.


>>> weird_board = [['_'] * 3] * 3
>>> weird_board
[['_', '_', '_'], ['_', '_', '_'], ['_', '_', '_']]
>>> weird_board[1][2] = 'O'
>>> weird_board
[['_', '_', 'O'], ['_', '_', 'O'], ['_', '_', 'O']]
The outer list is made of three references to the same inner list. While it is
unchanged, all seems right.
Placing a mark in row 1, column 2, reveals that all rows are aliases referring to
the same object.
Using

If a implements __iadd__, that will be called. In the case of mutable sequences (e.g.,
list, bytearray, array.array), a will be changed in place (i.e., the effect will be similar
to a.extend(b)). However, when a does not implement __iadd__, the expression a +=
b has the same effect as a = a + b: the expression a + b is evaluated first, producing a
new object, which is then bound to a. In other words, the identity of the object bound
to a may or may not change, depending on the availability of __iadd__.
In general, for mutable sequences, it is a good bet that __iadd__ is implemented and
that += happens in place. For immutable sequences, clearly there is no way for that to
happen


• Putting mutable items in tuples is not a good idea.
• Augmented assignment is not an atomic operation—we just saw it throwing an
exception after doing part of its job.
• Inspecting Python bytecode is not too difficult, and is often helpful to see what is
going on under the hood.



The list.sort method sorts a list in place—that is, without making a copy. It returns
None to remind us that it changes the target object, and does not create a new list. This
is an important Python API convention: functions or methods that change an object in
place should return None to make it clear to the caller that the object itself was changed,
and no new object was created. The same behavior can be seen, for example, in the
random.shuffle function.

In contrast, the built-in function sorted creates a new list and returns it. In fact, it
accepts any iterable object as an argument, including immutable sequences and generators
(see Chapter 14). Regardless of the type of iterable given to sorted, it always returns
a newly created list.


bisect(haystack, needle) does a binary search for needle in haystack—which must
be a sorted sequence—to locate the position where needle can be inserted while maintaining
haystack in ascending order. In other words, all items appearing up to that
position are less than or equal to needle. You could use the result of bisect(haystack,
needle) as the index argument to haystack.insert(index, needle)—however, using
insort does both steps, and is faster.


The append and popleft operations are atomic, so deque is safe to use as a LIFO queue
in multithreaded applications without the need for using locks.


queue
This provides the synchronized (i.e., thread-safe) classes Queue, LifoQueue, and
PriorityQueue. These are used for safe communication between threads. All three
classes can be bounded by providing a maxsize argument greater than 0 to the
constructor. However, they don’t discard items to make room as deque does. Instead,
when the queue is full the insertion of a new item blocks—i.e., it waits until
some other thread makes room by taking an item from the queue, which is useful
to throttle the number of live threads.
multiprocessing
Implements its own bounded Queue, very similar to queue.Queue but designed for
interprocess communication. A specialized multiprocessing.JoinableQueue is
also available for easier task management.
asyncio
Newly added to Python 3.4, asyncio provides Queue, LifoQueue, PriorityQueue,
and JoinableQueue with APIs inspired by the classes contained in the queue and
multiprocessing modules, but adapted for managing tasks in asynchronous programming.
heapq
In contrast to the previous three modules, heapq does not implement a queue class,
but provides functions like heappush and heappop that let you use a mutable sequence
as a heap queue or priority queue.

Underlying the way mappings deal with missing keys is the aptly named __missing__
method. This method is not defined in the base dict class, but dict is aware of it: if you
subclass dict and provide a __missing__ method, the standard dict.__getitem__ will
call it whenever a key is not found, instead of raising KeyError.
The __missing__ method is just called by __getitem__ (i.e., for
the d[k] operator). The presence of a __missing__ method has no
effect on the behavior of other methods that look up keys, such as
get or __contains__ (which implements the in operator). This is
why the default_factory of defaultdict works only with
__getitem__, as noted in the warning at the end of the previous
section


If you implement a class with a custom __eq__ method, you must
also implement a suitable __hash__, because you must always make
sure that if a == b is True then hash(a) == hash(b) is also True.
Otherwise you are breaking an invariant of the hash table algorithm,
with the grave consequence that dicts and sets will not deal
reliably with your objects. If a custom __eq__ depends on mutable
state, then __hash__ must raise TypeError with a message like
unhashable type: 'MyClass'.


Code that has to run on multiple machines or on multiple occasions
should never depend on encoding defaults. Always pass an
explicit encoding= argument when opening text files, because the
default may change from one machine to the next, or from one day
to the next.

So you need to call setlocale(LC_COLLATE, «your_locale») before using
locale.strxfrm as the key when sorting.


>>> fact = factorial
>>> fact
<function factorial at 0x...>
>>> fact(5)
120
>>> map(factorial, range(11))
<map object at 0x...>
>>> list(map(fact, range(11)))
[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]


In the functional programming paradigm, some of the best known higher-order functions
are map, filter, reduce, and apply. The apply function was deprecated in Python
2.3 and removed in Python 3 because it’s no longer necessary. If you need to call a
function with a dynamic set of arguments, you can just write fn(*args, **key
words) instead of apply(fn, args, kwargs).



def clip(text:str, max_len:'int > 0'=80) -> str#Annotated clip function


>>> from operator import mul
>>> from functools import partial
>>> triple = partial(mul, 3)
>>> triple(7)
21
>>> list(map(triple, range(1, 10)))
[3, 6, 9, 12, 15, 18, 21, 24, 27]

The functools.partialmethod function (new in Python 3.4) does the same job as
partial, but is designed to work with methods.



def make_averager():
series = []
def averager(new_value):
series.append(new_value)
total = sum(series)
return total/len(series)
return averager
When invoked, make_averager returns an averager function object. Each time an
averager is called, it appends the passed argument to the series, and computes the
current average, as shown in Example 7-10.
Example 7-10. Testing Example 7-9
>>> avg = make_averager()
>>> avg(10)
10.0
>>>avg(11)
10.5
>>> avg(12)
11.0


To summarize: a closure is a function that retains the bindings of the free variables that
exist when the function is defined, so that they can be used later when the function is
invoked and the defining scope is no longer available.
Note that the only situation in which a function may need to deal with external variables
that are nonglobal is when it is nested in another function.

# very strange usage, very different with cpp


But with immutable types like numbers, strings, tuples, etc., all you can do is read, but
never update. If you try to rebind them, as in count = count + 1, then you are implicitly
creating a local variable count. It is no longer a free variable, and therefore it is not saved
in the closure.
To work around this, the nonlocal declaration was introduced in Python 3. It lets you
flag a variable as a free variable even when it is assigned a new value within the function.
If a new value is assigned to a nonlocal variable, the binding stored in the closure is
changed. A correct implementation of our newest make_averager looks like
Example 7-14.
Example 7-14. Calculate a running average without keeping all history (fixed with the
use of nonlocal)
def make_averager():
count = 0
total = 0
def averager(new_value):
nonlocal count, total
count += 1
total += new_value
return total / count
return averager



import functools
from clockdeco import clock
@functools.lru_cache() #
@clock #
def fibonacci(n):
if n < 2:
return n
return fibonacci(n-2) + fibonacci(n-1)
if __name__=='__main__':
print(fibonacci(6))


Besides making silly recursive algorithms viable, lru_cache really shines in applications
that need to fetch information from the Web.
It’s important to note that lru_cache can be tuned by passing two optional arguments.
Its full signature is:
functools.lru_cache(maxsize=128, typed=False)

When two decorators @d1 and @d2 are applied to a function f in that order, the result is
the same as f = d1(d2(f)).
In other words, this:
@d1
@d2
def f():
print('f')


>>> bus1 = HauntedBus(['Alice', 'Bill'])
>>> bus1.passengers
['Alice', 'Bill']
>>> bus1.pick('Charlie')
>>> bus1.drop('Alice')
>>> bus1.passengers
['Bill', 'Charlie']
>>> bus2 = HauntedBus()
>>> bus2.pick('Carrie')
>>> bus2.passengers
['Carrie']
>>> bus3 = HauntedBus()
>>> bus3.passengers
['Carrie']
>>> bus3.pick('Dave')
>>> bus2.passengers
['Carrie', 'Dave']
>>> bus2.passengers is bus3.passengers
True
>>> bus1.passengers
['Bill', 'Charlie']
So far, so good: no surprises with
The problem is that Bus instances that don’t get an initial passenger list end up sharing
the same passenger list among themselves.



The issue with mutable defaults explains why None is often used as the default value for
parameters that may receive mutable values.
def __init__(self, passengers=None):
if passengers is None:
self.passengers = []
else:
self.passengers = list(passengers)


You may be wondering why the {1, 2, 3} object was destroyed in Example 8-16. After
all, the s1 reference was passed to the finalize function, which must have held on to
it in order to monitor the object and invoke the callback. This works because final
ize holds a weak reference to {1, 2, 3}, as explained in the next section.

Not every Python object may be the target, or referent, of a weak reference. Basic list
and dict instances may not be referents, but a plain subclass of either can solve this
problem easily:
class MyList(list):
"""list subclass whose instances may be weakly referenced"""
a_list = MyList(range(10))
Weak



I was surprised to learn that, for a tuple t, t[:] does not make a copy, but returns a
reference to the same object. You also get a reference to the same tuple if you write
tuple(t).5 Example 8-20 proves it.
Example 8-20. A tuple built from another is actually the same exact tuple
>>> t1 = (1, 2, 3)
>>> t2 = tuple(t1)
>>> t2 is t1
True
>>> t3 = t1[:]
>>> t3 is t1
True



By convention, the first parameter of a class method should be
named cls (but Python doesn’t care how it’s named).


>>> from vector2d_v3 import Vector2d
>>> class ShortVector2d(Vector2d): #
... typecode = 'f'
...
>>> sv = ShortVector2d(1/11, 1/27) #
>>> sv
ShortVector2d(0.09090909090909091, 0.037037037037037035) #
>>> len(bytes(sv)) #
9
Create ShortVector2d as a Vector2d subclass just to overwrite the typecode
class attribute.

In our Vector code, we’ll not need the slice.indices() method because when we get
a slice argument we’ll delegate its handling to the _components array. But if you can’t
count on the services of an underlying sequence, this method can be a huge time saver


When using reduce, it’s good practice to provide the third argument,
reduce(function, iterable, initializer), to prevent
this exception: TypeError: reduce() of empty sequence with
no initial value (excellent message: explains the problem and
how to fix it). The initializer is the value returned if the sequence
is empty and is used as the first argument in the reducing
loop, so it should be the identity value of the operation. As examples,
for +, |, ^ the initializer should be 0, but for *, & it should
be 1.



The trick is that set_card knows that the deck object has an attribute named _cards,
and _cards must be a mutable sequence. The set_card function is then attached to the
FrenchDeck class as the __setitem__ special method. This is an example of monkey
patching: changing a class or module at runtime, without touching the source code.
Monkey patching is powerful, but the code that does the actual patching is very tightly
coupled with the program to be patched, often handling private and undocumented
parts.
#very strange behavior compare with static type langu



ABCs are meant to encapsulate very general concepts, abstractions, introduced by a
framework—things like “a sequence” and “an exact number.” [Readers] most likely don’t
need to write any new ABCs, just use existing ones correctly, to get 99.9% of the benefits
without serious risk of misdesign.


An abstract method can actually have an implementation. Even if
it does, subclasses will still be forced to override it, but they will be
able to invoke the abstract method with super(), adding functionality
to it instead of implementing from scratch. See the abc
module documentation for details on @abstractmethod usage.


However, the abc.ABC class is new in Python 3.4, so if you are using an earlier version
of Python—and it does not make sense to subclass another existing ABC—then you
must use the metaclass= keyword in the class statement, pointing to abc.ABCMeta
(not abc.ABC). In Example 11-9, we would write:
class Tombola(metaclass=abc.ABCMeta):
# ...
The metaclass= keyword argument was introduced in Python 3. In Python 2, you must
use the __metaclass__ class attribute:
class Tombola(object): # this is Python 2!!!
__metaclass__ = abc.ABCMeta


When abstractmethod() is applied in combination with
other method descriptors, it should be applied as the
innermost decorator, …12


Subclassing built-in types like dict or list or str directly is errorprone
because the built-in methods mostly ignore user-defined
overrides. Instead of subclassing the built-ins, derive your classes
from the collections module using UserDict, UserList, and
UserString, which are designed to be easily extended.

The in-place special methods should never be implemented for
immutable types like our Vector class. This is fairly obvious, but
worth stating anyway.

In general, if a forward infix operator method (e.g., __mul__) is
designed to work only with operands of the same type as self, it’s
useless to implement the corresponding reverse method (e.g.,
__rmul__) because that, by definition, will only be invoked when
dealing with an operand of a different type.

To “support multiple traversals” it must be possible to obtain multiple independent
iterators from the same iterable instance, and each iterator must keep its own internal
state, so a proper implementation of the pattern requires each call to iter(my_itera
ble) to create a new, independent, iterator. That is why we need the SentenceItera
tor class in this example.


def chain(*iterables):
... for i in iterables:
... yield from i
...
>>> list(chain(s, t))
['A', 'B', 'C', 0, 1, 2]
As you can see, yield from i replaces the inner for loop completely. The use of yield
from in this example is correct, and the code reads better, but it seems like mere syntactic
sugar. Besides replacing a loop, yield from creates a channel connecting the inner
generator directly to the client of the outer generator. This channel becomes really important
when generators are used as coroutines and not only produce but also consume
values from the client code. Chapter 16 dives into coroutines, and has several pages
explaining why yield from is much more than syntactic sugar


from functools import wraps
def coroutine(func):
"""Decorator: primes `func` by advancing to first `yield`"""
@wraps(func)
def primer(*args,**kwargs):
gen = func(*args,**kwargs)
next(gen)
return gen
return primer
The decorated generator function is replaced by this primer function which,
when invoked, returns the primed generator.
Call the decorated function to get a generator object.
Prime the generator.
Return it.


>>> coro_avg = averager()
>>> next(coro_avg)
>>> coro_avg.send(10)
>>> coro_avg.send(30)
>>> coro_avg.send(6.5)
>>> try:
... coro_avg.send(None)
... except StopIteration as exc:
... result = exc.value
...
>>> result
Result(count=3, average=15.5)



>>> def gen():
... for c in 'AB':
... yield c
... for i in range(1, 3):
... yield i
...
>>> list(gen())
['A', 'B', 1, 2]
Can be written as:
>>> def gen():
... yield from 'AB'
... yield from range(1, 3)
...
>>> list(gen())
['A', 'B', 1, 2]


The main point of this section is that an expression like obj.attr does not search for
attr starting with obj. The search actually starts at obj.__class__, and only if there is
no property named attr in the class, Python looks in the obj instance itself. This rule
applies not only to properties but to a whole category of descriptors, the overriding
descriptors. Further treatment of descriptors must wait for Chapter 20, where we’ll see
that properties are in fact overriding descriptors.


def quantity(storage_name):
def qty_getter(instance):
return instance.__dict__[storage_name]
def qty_setter(instance, value):
if value > 0:
instance.__dict__[storage_name] = value
else:
raise ValueError('value must be > 0')
return property(qty_getter, qty_setter)
page433